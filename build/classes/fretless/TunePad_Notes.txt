6:34 AM 5/12/2011

so what are the options?
invisible is the root, and holds the scrapyard of free objects.

selected is special.
is the main played special?  or the same as selected?

or right-click, 'set as main'

in either case, as soon as we tear off a thing, it is added to the invisiroot.

then you can move it around ('selected' must be a global reference).  invisiroot redraws on all changes.

for now can make global selected

so main things to make:

* drag playable within vine.

* rip playable and relocate.
  if drop in space, leave in space and support?  or undo back to prev state? 
  for this, first we need to be able to dynamically remove and insert.  
    and for this, copy and insert first.  

* highlighted play animation, starting with cursor line.


so for easy:
* cursor line
* xerox and insert on drop.


long picture, will want repeat box.

is xerox supported for all playables?

rip copy paste

ok we need a REAL hit test that gets containers.  guess you return the innermost container you hit?  main deal is when a container and leaf overlap, ignore the leaf.

general issue, when two leaves overlap, return both?  or assume they are plotted in layered order and return the last to plot (=frontmost).  yeah that's normal. plot in opposite order of search, plot frontmost last.

ok, so we need an is-container test.  maybe every container has separate lists, for containers and for leaves?  just as much trouble to maintain, still need iscontainer to add to leaves.  

interface IContainer?  anyway, all playables have an Is_Container flag.  or Can_Receive() flag.  who can receive?  vines yes.  repeaters too, but doesn't it knock out the prev contents?

Can_Receive_Drop() is what we want to find.  but we have to explore containers to find it, not explore leaves.  so can a leaf just say null, I am not a container?

you must traverse everything that overlaps your target point, ok?  is that good?  and the first one to return anything that Can_Receive_Drop() ends your local search.


so next?
we get the container.  how to insert?
container.insert is fine.  BUT, you can insert in many places.  just inserting isn't enough.

that means finding a second time from x,y to an object.  but you need x,y anyway to give it coords *within* the object.  

container_insert(double x,double y,Playable_Drawable NewChild)


the big question is how to handle a single pattern duplicated in many places. 
one way is to have a single pattern object, that is the child of many parent containers. 
  pro: everything syncs perfectly.
  con: no child can point up to its parent.
other way is to have real multiple instances, and a master object dictates all of the changes to each of the children.
  pro: each child can point to its parent.
  con: how the heck do you sync separate objects?  
    do we need to support a sync() method for every instance? and to support such a thing, what happens when each member might have a different topology?

when do we need pointers up to parents? when we remove a playable, it must notify its parent that it is gone.
 (if selected though, we have a hit stack that remembers parentage.)

ok so we select a thing, then want to drag it around. 
if the thing selected is a notebox in a vine, then dragging must interact with vine.  that's OK, noteboxes can point up.

if the thing selected is a child, then we need the hit stack to notify the vine. 

maybe every playable needs a Notify_Up() function?  and what information do we pass to it?

alternative is that each child object can have multiple parent pointers. still need Notify_Up() for each parent.  

is this all about inverse kinematics back upward the parent tree?  

inevitably, if any child can have multiple parents, then a separate transform object above each child is necessary. one for each linkage. 


oy.  easiest way in the world is for every node to be unique, have its own coords and maybe parent pointer, and you just copy things. 

patterns in different places would be cool, though.

***

6/5/2013
so new creatures are:
transformer - all coordinates and scaling
playable - meat
cursor - spawn of playable, carries all state information during play.

transformers are like edges of connection between multiple parents and multiple children.

with cursor do we need render context anymore?  rc contains sum&product of all offsets and scales. (and shears?)
so would not my cursor contain all of my compiled temporary transformations? 
when I create a cursor, do I pass it the cursor that was passed to me?  that is how rc works anyway, so why not.
for temporary, just stuff one rc inside each of all cursor types.  all cursors own an rc (and a drawing context?)

do playables still have a Render_Audio function?  should not. spawn cursor and render to next chunk.
for the time being, cursors will not be static type.  They will do all of the playing that their playable needs, plus state information.

